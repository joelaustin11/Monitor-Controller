// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------- //
// PGA2310 //
// ------- //

#define PGA2310_wrap_target 0
#define PGA2310_wrap 10

static const uint16_t PGA2310_program_instructions[] = {
            //     .wrap_target
    0x80e0, //  0: pull   ifempty block              
    0xe001, //  1: set    pins, 1                    
    0x00e3, //  2: jmp    !osre, 3                   
    0xe000, //  3: set    pins, 0                    
    0xe04f, //  4: set    y, 15                      
    0xb042, //  5: nop                    side 0     
    0x6001, //  6: out    pins, 1                    
    0xb842, //  7: nop                    side 1     
    0x0085, //  8: jmp    y--, 5                     
    0xe001, //  9: set    pins, 1                    
    0x0000, // 10: jmp    0                          
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program PGA2310_program = {
    .instructions = PGA2310_program_instructions,
    .length = 11,
    .origin = -1,
};

static inline pio_sm_config PGA2310_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + PGA2310_wrap_target, offset + PGA2310_wrap);
    sm_config_set_sideset(&c, 2, true, false);
    return c;
}

// Helper frunction for pin configuration
void PGA2310_program_init(PIO pio, uint sm, uint offset, uint setpin, uint outpin, uint sidesetpin)
{
    pio_gpio_init(pio, outpin); // Sets the GPIO pin
    pio_sm_config c = PGA2310_program_get_default_config(offset) ; //stores inside c
    sm_config_set_set_pins(&c, setpin, 1); // Sets the set pin and number of pins
    sm_config_set_out_pins(&c, outpin, 1); // Sets the out pin and number of pins
    sm_config_set_sideset_pins(&c, sidesetpin); // Sets the sideset pin
    sm_config_set_out_shift(&c, false, false, 16); // Sets the OSR shift direction, autopull, and the number of 
                                                // bits to be shifted before OSR is topped up automatically
    sm_config_set_sideset(&c, 1, false, false); // Further configuration of sideset behaviour
    pio_sm_init(pio, sm, offset, &c); 
}

#endif

